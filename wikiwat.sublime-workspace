{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"keyup",
				"keyupAction"
			],
			[
				"text",
				"textInput"
			],
			[
				"promise",
				"promisedUsablePage〔variable〕"
			],
			[
				"title",
				"title"
			],
			[
				"wiki",
				"wikiPageTitle"
			],
			[
				"as",
				"asyncQueryForImages"
			],
			[
				"async",
				"asyncGetRandomUsablePage"
			],
			[
				"im",
				"images"
			],
			[
				"con",
				"contains	.contains()"
			],
			[
				"acc",
				"accessed"
			],
			[
				"asy",
				"asyncGetRandomUsablePage"
			],
			[
				"ima",
				"imageArray〔argument〕"
			],
			[
				"image",
				"image"
			],
			[
				"sub",
				"submitAction〔function〕"
			],
			[
				"rdi",
				"replaceDiacritics"
			],
			[
				"di",
				"diacritics2url"
			],
			[
				"repla",
				"replaceAll	.replaceAll()"
			],
			[
				"cl",
				"children	.children()"
			],
			[
				"comp",
				"comparableTitle〔variable〕"
			],
			[
				"ti",
				"titleNoPunct"
			],
			[
				"t",
				"text〔function〕"
			],
			[
				"jq",
				"jq-boilerplate-min	jQuery Plugin Boilerplate Minified"
			],
			[
				"l",
				"log"
			],
			[
				"log",
				"log"
			],
			[
				"qu",
				"queryForImageInfo"
			],
			[
				"border-b",
				"border-bottom-left-radius"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"padding",
				"padding-right"
			],
			[
				"inli",
				"inline-block"
			],
			[
				"flex",
				"flex-direction"
			],
			[
				"align",
				"align-items"
			],
			[
				"ali",
				"align-content"
			],
			[
				"min",
				"minspect"
			],
			[
				"que",
				"queryUrl"
			],
			[
				"s",
				"space-between"
			],
			[
				"mar",
				"margin-top"
			],
			[
				"img",
				"imgTag"
			],
			[
				"padd",
				"padding"
			],
			[
				"inl",
				"inline-block"
			],
			[
				"display",
				"display"
			],
			[
				"lay",
				"display"
			],
			[
				"background-",
				"background-blend-mode"
			],
			[
				"pa",
				"padding-bottom"
			],
			[
				"w",
				"word-wrap"
			],
			[
				"b",
				"baseline"
			],
			[
				"m",
				"middle"
			],
			[
				"in",
				"inline-block"
			],
			[
				"al",
				"align-content"
			],
			[
				"paddi",
				"padding-left"
			],
			[
				"box-s",
				"box-shadow"
			],
			[
				"back",
				"backface-visibility"
			],
			[
				"ba",
				"background-color"
			],
			[
				"font",
				"font-weight"
			],
			[
				"li",
				"link	Tag"
			],
			[
				"rand",
				"randIndex"
			],
			[
				"json",
				"jsonpData"
			],
			[
				"pg",
				"pages"
			],
			[
				"pag",
				"pageImages"
			],
			[
				"pageI",
				"pageInfo"
			],
			[
				"st",
				"start"
			],
			[
				"file_",
				"file_get_contents"
			],
			[
				"g",
				"getRandUrl"
			],
			[
				"jso",
				"jsonpData"
			],
			[
				"f",
				"function"
			],
			[
				"fu",
				"fullurl"
			],
			[
				"str_r",
				"str_replace"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "[\n	{ \"keys\": [\"ctrl+shift+c\"],  \"command\": \"toggle_fold_comments\" }\n]",
			"file": "/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Fold Comments/Default (Windows).sublime-keymap",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 69,
				"line_ending": "Windows",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "UnusableImages.js",
			"settings":
			{
				"buffer_size": 2239,
				"line_ending": "Windows",
				"name": "var UNUSABLE_IMAGES=["
			}
		},
		{
			"contents": "Get the Manaphy Egg (in Pokémon Ranger)\n\n\nhttps://www.wikihow.com/api.php?action=query&format=json&prop=info%7C&prop=templates%7Cflagged%7Cpageimages%7Cimages&generator=random&inprop=url&imlimit=100&grnnamespace=0\n\n&prop=templates%7Cflagged%7Cpageimages%7Cimages",
			"settings":
			{
				"buffer_size": 262,
				"line_ending": "Windows",
				"name": "Get the Manaphy Egg (in Pokémon Ranger)"
			}
		},
		{
			"contents": "var STD_PUNCT = /[\\'!\"#$%&()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~]/g;\nvar NUM_INITIAL_IMAGES = 3;\nvar MIN_PAGE_IMAGES = 3; //must be >= NUM_INITIAL_IMAGES\nvar DEFAULT_INPUT_MESSAGE = 'Guess What\\'s Going on!';\n\nvar gPageTitle;\n\nasyncGetRandomUsablePage().done(asyncQueryForAndLoadImages, setPageName);\n\nfunction setPageName(pageInfo) {\n   gPageTitle = new titleObject(pageInfo.title);\n   console.log(gPageTitle);\n}\n\n$(document).data('readyDeferred', $.Deferred()).ready(function() {\n   $(document).data('readyDeferred').resolve();\n\n   disableButton();\n   $('#f_textInput').css('color', '#9EB8A0');\n\n   $('#f_textInput').focus(function() {\n      $('#f_textInput').css('color', '#262b26');\n      if ($(this).val() === DEFAULT_INPUT_MESSAGE)\n         $(this).val('');\n   });\n\n   $('#f_textInput').keyup(function() {\n\n      if ($(this).val() !== '')\n         enableButton();\n      else\n         disableButton();\n   });\n\n   $('#f_textInput').blur(function() {\n      if ($(this).val() !== '')\n         enableButton();\n      else {\n         $(this).val(DEFAULT_INPUT_MESSAGE);\n         $(this).css('color', '#9EB8A0');\n         disableButton();\n      }\n   });\n\n   $('#f_button').click();\n\n}); //End $(document).ready(function() {\n\nfunction findMatches(guess, title) {\n   var guessWordsMatched = [];\n   for (var i = 0; i < title.normTokens.length; i++) {\n      for (var j = 0; j < guess.normTokens.length; j++) {\n         if (title.normTokens[i] === guess.normTokens[j]) {\n            if (guess.guessed[j] === 0) {\n               guess.guessed[j] = 1;\n               title[i] = 1;\n               guessWordsMatched.push(j);\n            }\n         }\n      }\n   }\n   return guessWordsMatched;\n}\n\nfunction submitAction() {\n   var guess = new titleObject($('#f_textInput').val());\n   var wordsMatched = findMatches(guess, gPageTitle);\n   console.log(wordsMatched.sort());\n}\n\nfunction titleObject(str) {\n   this.origString = str;\n   this.origTokens = str.match(/\\S+/g); //original chars/punct\n   this.normTokens =\n      diacritics2url.replaceDiacritics(str.toLowerCase().replace(STD_PUNCT, '')).match(/\\S+/g);\n   this.guessed = zeroArray(this.origTokens.length);\n}\n\nfunction zeroArray(l) {\n   var res = new Array(l);\n   while (--l >= 0) {\n      res[l] = 0;\n   }\n   return res;\n}\n\nfunction disableButton() {\n   $('#f_button').attr('disabled', 'true');\n   $('.buttonLabel').css('color', '#9EB8A0');\n}\n\nfunction enableButton() {\n   $('#f_button').removeAttr('disabled');\n   $('.buttonLabel').css('color', '#444f45');\n}\n\nfunction isUnusableImage(imageTitle, pageTitle) {\n   console.log(\"comparing \" + imageTitle + \" & \" + pageTitle);\n   if (!imageTitle.includes(pageTitle)) {\n      console.log(\"\\t\" + imageTitle + \" !== \" + pageTitle);\n      return true;\n   }\n   return false;\n}\n\nfunction filterUnusableImages(imageArray, pageTitle) {\n   //filter out those dumb article metadata images that are sometimes delivered\n   if (imageArray != null) { // != is intentional, checks for undefined\n      for (var i = imageArray.length - 1; i >= 0; i--) {\n         if (isUnusableImage(imageArray[i].title, pageTitle))\n            imageArray.splice(i, 1);\n      }\n   }\n}\n\nfunction asyncGetRandomUsablePage() {\n   /* Handles the work of getting information about a random \n   article and determining whether it will be usable*/\n   $.ajax({ //get random page using mediawiki API\n      url: 'https://www.wikihow.com/api.php?action=query&format=json&prop=info%7Cimages&generator=random&inprop=url&imlimit=100&grnnamespace=0',\n      dataType: 'jsonp',\n      success: function(jsonpData) {\n         /*The mediawiki api answers our request with a complex json object structure.\n         However, all of the data we're interested in is kept in a sub-object, \"pageInfo\"\n         Accessing it requires making this series of calls:\n            var page = jsonpData.query.pages;\n            var pageId = Object.keys(page)[0];\n            var pageInfo = page[pageId.toString()];\n         To avoid creating extra variables, I condense this to the single unreadable line below: */\n         var pageInfo = jsonpData.query.pages[Object.keys(jsonpData.query.pages)[0].toString()];\n         console.log(\"raw page images: \");\n         console.log(JSON.stringify(pageInfo.images));\n         var pageImages = pageInfo.images;\n         console.log(pageInfo.fullurl);\n\n         filterUnusableImages(pageImages, pageInfo.title);\n\n         if (pageImages == null || // == is intentional, checks for undefined\n            pageImages.length < MIN_PAGE_IMAGES ||\n            pageInfo.title.length > 256) {\n\n            return asyncGetRandomUsablePage(); //try again\n         }\n      }\n   });\n}\n\nfunction asyncQueryForAndLoadImages(pageInfo) {\n   var deff = $.Deferred();\n   $.ajax({ //make another async. request for image urls\n      url: synthImageInfoQuery(pageInfo.images),\n      dataType: 'jsonp',\n      success: function(jsonpData) {\n         //create array and fill w/ slightly more accessable image data\n         var images = [];\n         var keys = Object.keys(jsonpData.query.pages);\n\n         for (var i = 0; i < keys.length; i++) {\n            //put image objects in new array\n            var current = jsonpData.query.pages[keys[i].toString()];\n            images.push(current);\n         }\n\n         for (var i = 0; i < NUM_INITIAL_IMAGES && images.length !== 0; i++) {\n            //Get random int in range [0, images.length-1]\n            var randIndex = Math.floor(Math.random() * images.length);\n\n            var nextImageInfo = images[randIndex].imageinfo[0];\n            console.log(nextImageInfo);\n\n            images.splice(randIndex, 1); //removes used image from array and shifts all subsequent indexes down\n\n            $.when($(document).data('readyDeferred')).then(function() {\n               if ($('#img' + i).length) { //if image (placeholder) element exists \n                  $('#img' + i).attr('src', nextImageInfo.url);\n               } else {\n                  $('.wrap').append(synthImageHtml(nextImageInfo, i));\n               }\n            });\n         }\n      }\n   });\n}\n\nfunction synthImageInfoQuery(pageImages) {\n   //base url to query api for image sources\n   var queryUrl = 'https://www.wikihow.com/api.php?action=query&format=json&prop=imageinfo&titles=';\n   //append image titles seperated by '%7C' (url encoded '|')\n   for (var i = 0; i < pageImages.length; i++) {\n      queryUrl = queryUrl + pageImages[i].title;\n      if (i < pageImages.length - 1)\n         queryUrl = queryUrl + '%7C'; //url-encoded '|'\n      else\n         queryUrl = queryUrl + '&iiprop=url%7Csize&iiurlwidth=500'; //additional query properties\n   }\n   queryUrl = queryUrl.replace(/ /g, '+'); //url-encode spaces\n   return queryUrl;\n}\n\nfunction synthImageHtml(nextImageInfo, i) {\n   var imgTag = '<img class=\"pageImage\" src=\"' + nextImageInfo.url + '\" id=\"img' + i + '\" />';\n   return '<div class=\"box floatyWrapper\">\\n' + imgTag + '\\n</div>\\n';\n}\n\nfunction setFixedInputPosition() {\n   if($('body').width()<=500)\n      $(\"#f_area\").css(\"bottom\", Math.max(0, ($(document).scrollTop() + $(window).height()) - $(\".siteFooter\").offset().top));\n   else\n      $(\"#f_area\").css(\"bottom\", 0);\n}\n\n$(window).scroll(setFixedInputPosition);\n$(window).resize(setFixedInputPosition);\n",
			"settings":
			{
				"buffer_size": 7214,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 490.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"Snippet: ",
				"Snippet: Function"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"css3",
				"CSS3: Clear Gutter Marks"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"linti",
				"SublimeLinter: Lint This View"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			]
		],
		"width": 725.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/res"
	],
	"file_history":
	[
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/detectMobile.js",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/HTML-CSS-JS Prettify/.jsbeautifyrc",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Fold Comments/foldcomments.sublime-settings",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/getUnusableImages.js",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/Diacritics2Url.js",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/BracketHighlighter/Example.sublime-keymap",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/res/Diacritics2Url.js",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/HTML-CSS-JS Prettify/HTMLPrettify.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/JavaScript.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/BracketHighlighter/bh_swapping.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/CSS3.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/pagestyle.css",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/CSS3/CSS3.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/SublimeCodeIntel.sublime-settings",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/index.html",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/Emmet.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/AppendSemiColon/Default.sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/Tern.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/Tern.sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Emmet/Emmet.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Emmet/Default (Windows).sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/HTML-CSS-JS Prettify/Default (Windows).sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/tern_for_sublime/Tern.sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/ColorHelper/color_helper.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/color_helper.sublime-settings",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/wikiwat.sublime-project",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/CSS.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/CSScomb/Default.sublime-keymap",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/ColorPicker/ColorPicker.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/ColorPicker.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Gutter Color/GutterColor.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/GutterColor.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/CSScomb.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/CSScomb/CSScomb.sublime-settings",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/extras.txt",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/main.js",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/BrowserIntegration/BrowserIntegration.sublime-settings",
		"/C/Users/Adam/Downloads/stylish-css-buttons-source/stylish-css-buttons-source/css/style.css",
		"/C/Users/Adam/Downloads/stylish-css-buttons-source/stylish-css-buttons-source/index.html",
		"/C/Users/Adam/Documents/JavaScript/mastermind/mmController.js",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/HTMLBeautify/HTMLBeautify.sublime-settings",
		"/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/User/JSON.sublime-settings",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/main.js",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/index.html",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/WikiWat/.main.js.swp",
		"/C/Users/Adam/Documents/JavaScript/wikiguess/process.php",
		"//"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 117.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"input",
			"Link",
			"FA",
			"516",
			"gPage",
			"newTitleObjcet",
			"$('#f_textInput')",
			"$(document)",
			"asyncGet",
			"filterUnusableImages",
			"asyncQueryForAndLoadImages",
			"jsonpData",
			"$(document).data('readyDe",
			"pageImages",
			"contains",
			"} ",
			"},",
			"{",
			");\n",
			"getRandomUsablePage",
			"         \n",
			"asyncLoadImagesFromRandomArticle",
			"j",
			"pageImages",
			"correct",
			"PLACEHOLDER_VAL",
			"stdPnct",
			"minPageImages",
			"numInitImages",
			"titleObject",
			"inputString",
			"stdPunctuation",
			"comparable",
			"  ",
			"   ",
			"  ",
			" ",
			"l\"]",
			"l\"",
			"ctrl+l",
			"join",
			"delete",
			"right",
			"ctrl+shift+d",
			"command",
			"    {",
			"ctrl+shift+k",
			"alt+k",
			"alt+backspace",
			"alt+",
			"      \n",
			"is",
			" ')",
			"insert",
			";",
			"tern",
			"spaces",
			"ctrl+shif",
			"ctrl+shift+c",
			"color",
			"button",
			"$guess",
			"name",
			"box",
			"Inner",
			"synthesizeImageTag",
			"synthesizeImageInfoQuery",
			"pageId",
			"current.imageinfo[0]",
			"imageinfo",
			"currentInfo.aspectRatio",
			"nextImage",
			"images[randIndex].imageinfo[0]",
			"red",
			"line",
			"line-hei",
			"<span class=\"vertAligner\"></span>",
			";\n",
			"border",
			"webkit",
			";\n",
			"10px",
			"tabs",
			"ctrl+shift+x",
			"ctrl+shift",
			"ctrl+alt+x",
			"ctrl+alt",
			"x",
			"alt+ctrl",
			"ctrl+alt",
			"x",
			"id",
			"down",
			"\": ",
			"ctrl+d",
			"swap_line_up",
			"swap_line_down",
			"up",
			"}",
			"\\\">\");",
			"\\\">\";",
			"f",
			"F",
			"9",
			"phase"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"}"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/Adam/AppData/Roaming/Sublime Text 3/Packages/Fold Comments/Default (Windows).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 69,
						"regions":
						{
						},
						"selection":
						[
							[
								69,
								69
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": true,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "UnusableImages.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2239,
						"regions":
						{
						},
						"selection":
						[
							[
								167,
								167
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"auto_name": "var UNUSABLE_IMAGES=[",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 262,
						"regions":
						{
						},
						"selection":
						[
							[
								262,
								262
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "Get the Manaphy Egg (in Pokémon Ranger)",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7214,
						"regions":
						{
						},
						"selection":
						[
							[
								5241,
								6026
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3366.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 40.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 207.0
	},
	"pinned_build_system": "",
	"project": "wikiwat.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WikiWat\\pagestyle.css"
			],
			[
				"package",
				"C:\\Users\\Adam\\AppData\\Roaming\\Sublime Text 3\\Packages\\User\\Preferences.sublime-settings"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 242.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 490.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 221.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
